** Activity B-1

Step 1: 

using static System.Console; 
    using Packt.CS7; 
    using Microsoft.EntityFrameworkCore; 
    using System.Linq;

Step 2: 

using(var db = new Northwind()) 
    { 
      WriteLine("List of categories and the number of products:"); 
 
      IQueryable<Category> cats = db.Categories.Include(c => c.Products); 
 
      foreach(Category c in cats) 
      { 
        WriteLine($"{c.CategoryName} has {c.Products.Count} products."); 
      } 
 
      WriteLine("List of products that cost more than a given price with most expensive first."); 
      string input; 
      decimal price; 
      do 
      {
        Write("Enter a product price: "); 
        input = ReadLine(); 
      } while (!decimal.TryParse(input, out price)); 
 
      IQueryable<Product> prods = db.Products.Where(product => product.UnitPrice > price).OrderByDescending(product => product.UnitPrice); 
 
      foreach (Product item in prods)  
      { 
        WriteLine($"{item.ProductID}: {item.ProductName} costs {item.UnitPrice:$#,##0.00}"); 
      } 
    }

** Activity B-2

Step 1

using Microsoft.Extensions.Logging; 
    using System; 
    using static System.Console; 
 
    namespace Packt.CS7 
    { 
      public class ConsoleLogProvider : ILoggerProvider 
      { 
        public ILogger CreateLogger(string categoryName) 
        { 
          return new ConsoleLogger(); 
        } 
 
        // if your logger uses unmanaged resources,  
        // you can release the memory here 
        public void Dispose() { } 
      } 
 
      public class ConsoleLogger : ILogger 
      { 
        // if your logger uses unmanaged resources, you can 
        // return the class that implements IDisposable here 
        public IDisposable BeginScope<TState>(TState state) 
        { 
          return null; 
        } 
 
        public bool IsEnabled(LogLevel logLevel) 
        { 
          // to avoid overlogging, you can filter 
          // on the log level 
          switch (logLevel) 
          { 
            case LogLevel.Trace: 
            case LogLevel.Information: 
            case LogLevel.None: 
            return false; 
            case LogLevel.Debug: 
            case LogLevel.Warning: 
            case LogLevel.Error: 
            case LogLevel.Critical: 
            default: 
            return true; 
          }; 
        } 
 
        public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter) 
        { 
          // log the level and event identifier 
          Write($"Level: {logLevel}, Event ID: {eventId}"); 
 
          // only output the state or exception if it exists 
          if (state != null) 
          { 
            Write($", State: {state}"); 
          } 
          if (exception != null) 
          { 
            Write($", Exception: {exception.Message}"); 
          } 
          WriteLine(); 
        } 
      } 
    }

Step 3: 

    using Microsoft.EntityFrameworkCore.Infrastructure; 
    using Microsoft.Extensions.DependencyInjection; 
    using Microsoft.Extensions.Logging;


Step 4: 

using (var db = new Northwind()) 
    { 
      var loggerFactory = db.GetService<ILoggerFactory>(); 
      loggerFactory.AddProvider(new ConsoleLogProvider());

** Activity B-3

Step 1: 

    var newProduct = new Product 
    { 
      CategoryID = 6, // Meat & Poultry 
      ProductName = "Bob's Burger", 
      UnitPrice = 500M 
    }; 
    // mark product as added in change tracking 
    db.Products.Add(newProduct); 
    // save tracked changes to database 
    db.SaveChanges(); 
    foreach (var item in db.Products) 
    { 
      WriteLine($"{item.ProductID}: {item.ProductName} costs       
      {item.UnitPrice:$#,##0.00}"); 
    }


** Activity B-4

Step 1: 

    Product updateProduct = db.Products.First(p => p.ProductName.StartsWith("Bob")); 
    updateProduct.UnitPrice += 20M; 
    db.SaveChanges(); 
    foreach (var item in db.Products) 
    { 
      WriteLine($"{item.ProductID}: {item.ProductName} costs {item.UnitPrice:$#,##0.00}"); 
    }
